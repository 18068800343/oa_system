<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.ldxx.dao.ContractPaymentDao" >
	<select id="selectPayByStatus" resultType="org.ldxx.bean.Pay">
		select *,f.contract_money as fbcontractMoney,f.contract_name_yi,c.cc_name,b.u_name from pay a
			left join mode_status m on m.mode_id=a.pay_id
			left join fb_contract f on a.contract_name=f.contract_name and f.history=1
			left join consociation_company c on c.cc_id=f.contract_name_yi
			left join user b on a.compiler_person=b.user_id
		where m.status=#{status} and a.history=1
	</select>
 	<insert id="addPaySave" parameterType="org.ldxx.bean.Pay" >
    insert into pay (pay_id,pay_code, contract_name,contract_no, 
      contract_money, already_kp_money, this_time_kp_money, 
      main_contract_code, main_contract_name, main_contract_money, 
      prj_list_code, prj_name, fb_contract_schedule, 
      if_contract_do_cost, contract_do_cost_money, 
      already_accumulate_money,generation_advances_money,this_time_ask_money, 
      pay_method, receieve_money_company, this_time_actual_pay_money, 
      pay_list_explain, compiler_person, compiler_time, 
      make_time,history)
    values (#{pay.payId,jdbcType=VARCHAR},#{pay.payCode,jdbcType=VARCHAR}, #{pay.contractName,jdbcType=VARCHAR}, 
      #{pay.contractNo,jdbcType=VARCHAR},#{pay.contractMoney,jdbcType=VARCHAR}, #{pay.alreadyKpMoney,jdbcType=VARCHAR}, #{pay.thisTimeKpMoney,jdbcType=VARCHAR}, 
      #{pay.mainContractCode,jdbcType=VARCHAR}, #{pay.mainContractName,jdbcType=VARCHAR}, #{pay.mainContractMoney,jdbcType=VARCHAR}, 
      #{pay.prjListCode,jdbcType=VARCHAR}, #{pay.prjName,jdbcType=VARCHAR}, #{pay.fbContractSchedule,jdbcType=VARCHAR}, 
      #{pay.ifContractDoCost,jdbcType=VARCHAR}, #{pay.contractDoCostMoney,jdbcType=VARCHAR}, 
      #{pay.alreadyAccumulateMoney,jdbcType=VARCHAR}, #{pay.GenerationAdvancesMoney,jdbcType=VARCHAR}, #{pay.thisTimeAskMoney,jdbcType=VARCHAR}, 
      #{pay.payMethod,jdbcType=VARCHAR}, #{pay.receieveMoneyCompany,jdbcType=VARCHAR}, #{pay.thisTimeActualPayMoney,jdbcType=VARCHAR}, 
      #{pay.payListExplain,jdbcType=VARCHAR},#{pay.compilerPerson,jdbcType=VARCHAR}, #{pay.compilerTime,jdbcType=VARCHAR}, 
      now(),1)
  	</insert>
  	<update id="updateHistory">
  		update pay set history=0 where pay_id=#{payId}
  	</update>
  	<select id="selectPayById" resultType="pay">
  		select *,b.u_name from pay a
  		left join user b on a.compiler_person=b.user_id
  		 where pay_id=#{id}
  	</select>
  	<select id="fkNocount" resultType="int">
  		select count(1) from (select distinct pay_code from pay) as a
  	</select>
  
  	<select id="selectHistoryBypayCode" resultType="pay">
  		select *,f.fb_no,f.contract_money as fbcontractMoney,b.u_name from pay a
  		left join fb_contract f on a.contract_name=f.contract_name and f.history=1
  		left join user b on a.compiler_person=b.user_id
  		where pay_code=#{payCode} and a.history=0
  	</select>
  	
  	<select id="selectPayByNo" resultType="pay">
  		select pay_id from pay a left join mode_status m on m.mode_id=a.pay_id where m.status=2 and a.history=1 and contract_no=#{fbNo}
  	</select>
  	
  	<update id="updateGenerationAdvancesMoney">
  		update pay set generation_advances_money=generation_advances_money+#{programMoney}
  		where pay_id=#{id}
  	</update>
  	
  	<select id="getFbPayPlanAndMoney" resultType="pay">
  		SELECT MAX(a.fb_contract_schedule) as fb_contract_schedule,sum(a.this_time_actual_pay_money)as this_time_actual_pay_money 
  		FROM pay as a LEFT JOIN mode_status as b on a.pay_id=b.mode_id 
		where a.contract_no=#{no} and b.status=2 and a.history=1
  	</select>
  	
  	<select id="getTotalPayMoney" resultType="pay">
  		SELECT IFNULL(SUM(this_time_actual_pay_money),0) as already_accumulate_money FROM pay as a 
		LEFT JOIN mode_status as b on a.pay_id=b.mode_id
		where b.status=2 and a.history=1 and a.contract_no=#{no}
  	</select>
</mapper>