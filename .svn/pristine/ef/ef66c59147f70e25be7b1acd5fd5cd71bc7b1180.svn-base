<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.ldxx.mapper.PayMapper" >
  <resultMap id="BaseResultMap" type="org.ldxx.bean.Pay" >
    <id column="pay_id" property="payId" jdbcType="VARCHAR" />
    <result column="pay_code" property="payCode" jdbcType="VARCHAR" />
    <result column="contract_code" property="contractCode" jdbcType="VARCHAR" />
    <result column="contract_name" property="contractName" jdbcType="VARCHAR" />
    <result column="contract_money" property="contractMoney" jdbcType="VARCHAR" />
    <result column="already_kp_money" property="alreadyKpMoney" jdbcType="VARCHAR" />
    <result column="this_time_kp_money" property="thisTimeKpMoney" jdbcType="VARCHAR" />
    <result column="main_contract_code" property="mainContractCode" jdbcType="VARCHAR" />
    <result column="main_contract_name" property="mainContractName" jdbcType="VARCHAR" />
    <result column="main_contract_money" property="mainContractMoney" jdbcType="VARCHAR" />
    <result column="prj_list_code" property="prjListCode" jdbcType="VARCHAR" />
    <result column="prj_name" property="prjName" jdbcType="VARCHAR" />
    <result column="fb_contract_schedule" property="fbContractSchedule" jdbcType="VARCHAR" />
    <result column="if_contract_do_cost" property="ifContractDoCost" jdbcType="VARCHAR" />
    <result column="contract_do_cost_money" property="contractDoCostMoney" jdbcType="VARCHAR" />
    <result column="already_accumulate_money" property="alreadyAccumulateMoney" jdbcType="VARCHAR" />
    <result column="should_cut_df_money" property="shouldCutDfMoney" jdbcType="VARCHAR" />
    <result column="should_cut_material_money" property="shouldCutMaterialMoney" jdbcType="VARCHAR" />
    <result column="this_time_ask_money" property="thisTimeAskMoney" jdbcType="VARCHAR" />
    <result column="pay_method" property="payMethod" jdbcType="VARCHAR" />
    <result column="receieve_money_company" property="receieveMoneyCompany" jdbcType="VARCHAR" />
    <result column="this_time_actual_pay_money" property="thisTimeActualPayMoney" jdbcType="VARCHAR" />
    <result column="pay_list_explain" property="payListExplain" jdbcType="VARCHAR" />
    <result column="compiler_person" property="compilerPerson" jdbcType="VARCHAR" />
    <result column="compiler_time" property="compilerTime" jdbcType="VARCHAR" />
    <result column="open_ticket_file" property="openTicketFile" jdbcType="VARCHAR" />
    <result column="ticket_file_path" property="ticketFilePath" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    pay_id, pay_code, contract_code, contract_name, contract_money, already_kp_money, 
    this_time_kp_money, main_contract_code, main_contract_name, main_contract_money, 
    prj_list_code, prj_name, fb_contract_schedule, if_contract_do_cost, contract_do_cost_money, 
    already_accumulate_money, should_cut_df_money, should_cut_material_money, this_time_ask_money, 
    pay_method, receieve_money_company, this_time_actual_pay_money, pay_list_explain, 
    compiler_person, compiler_time, open_ticket_file, ticket_file_path
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.ldxx.bean.PayExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pay
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from pay
    where pay_id = #{payId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from pay
    where pay_id = #{payId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="org.ldxx.bean.PayExample" >
    delete from pay
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.ldxx.bean.Pay" >
    <selectKey resultType="java.lang.String" keyProperty="payId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pay (pay_code, contract_code, contract_name, 
      contract_money, already_kp_money, this_time_kp_money, 
      main_contract_code, main_contract_name, main_contract_money, 
      prj_list_code, prj_name, fb_contract_schedule, 
      if_contract_do_cost, contract_do_cost_money, 
      already_accumulate_money, should_cut_df_money, 
      should_cut_material_money, this_time_ask_money, 
      pay_method, receieve_money_company, this_time_actual_pay_money, 
      pay_list_explain, compiler_person, compiler_time, 
      open_ticket_file, ticket_file_path)
    values (#{payCode,jdbcType=VARCHAR}, #{contractCode,jdbcType=VARCHAR}, #{contractName,jdbcType=VARCHAR}, 
      #{contractMoney,jdbcType=VARCHAR}, #{alreadyKpMoney,jdbcType=VARCHAR}, #{thisTimeKpMoney,jdbcType=VARCHAR}, 
      #{mainContractCode,jdbcType=VARCHAR}, #{mainContractName,jdbcType=VARCHAR}, #{mainContractMoney,jdbcType=VARCHAR}, 
      #{prjListCode,jdbcType=VARCHAR}, #{prjName,jdbcType=VARCHAR}, #{fbContractSchedule,jdbcType=VARCHAR}, 
      #{ifContractDoCost,jdbcType=VARCHAR}, #{contractDoCostMoney,jdbcType=VARCHAR}, 
      #{alreadyAccumulateMoney,jdbcType=VARCHAR}, #{shouldCutDfMoney,jdbcType=VARCHAR}, 
      #{shouldCutMaterialMoney,jdbcType=VARCHAR}, #{thisTimeAskMoney,jdbcType=VARCHAR}, 
      #{payMethod,jdbcType=VARCHAR}, #{receieveMoneyCompany,jdbcType=VARCHAR}, #{thisTimeActualPayMoney,jdbcType=VARCHAR}, 
      #{payListExplain,jdbcType=VARCHAR}, #{compilerPerson,jdbcType=VARCHAR}, #{compilerTime,jdbcType=VARCHAR}, 
      #{openTicketFile,jdbcType=VARCHAR}, #{ticketFilePath,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.ldxx.bean.Pay" >
    <selectKey resultType="java.lang.String" keyProperty="payId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into pay
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="payCode != null" >
        pay_code,
      </if>
      <if test="contractCode != null" >
        contract_code,
      </if>
      <if test="contractName != null" >
        contract_name,
      </if>
      <if test="contractMoney != null" >
        contract_money,
      </if>
      <if test="alreadyKpMoney != null" >
        already_kp_money,
      </if>
      <if test="thisTimeKpMoney != null" >
        this_time_kp_money,
      </if>
      <if test="mainContractCode != null" >
        main_contract_code,
      </if>
      <if test="mainContractName != null" >
        main_contract_name,
      </if>
      <if test="mainContractMoney != null" >
        main_contract_money,
      </if>
      <if test="prjListCode != null" >
        prj_list_code,
      </if>
      <if test="prjName != null" >
        prj_name,
      </if>
      <if test="fbContractSchedule != null" >
        fb_contract_schedule,
      </if>
      <if test="ifContractDoCost != null" >
        if_contract_do_cost,
      </if>
      <if test="contractDoCostMoney != null" >
        contract_do_cost_money,
      </if>
      <if test="alreadyAccumulateMoney != null" >
        already_accumulate_money,
      </if>
      <if test="shouldCutDfMoney != null" >
        should_cut_df_money,
      </if>
      <if test="shouldCutMaterialMoney != null" >
        should_cut_material_money,
      </if>
      <if test="thisTimeAskMoney != null" >
        this_time_ask_money,
      </if>
      <if test="payMethod != null" >
        pay_method,
      </if>
      <if test="receieveMoneyCompany != null" >
        receieve_money_company,
      </if>
      <if test="thisTimeActualPayMoney != null" >
        this_time_actual_pay_money,
      </if>
      <if test="payListExplain != null" >
        pay_list_explain,
      </if>
      <if test="compilerPerson != null" >
        compiler_person,
      </if>
      <if test="compilerTime != null" >
        compiler_time,
      </if>
      <if test="openTicketFile != null" >
        open_ticket_file,
      </if>
      <if test="ticketFilePath != null" >
        ticket_file_path,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="payCode != null" >
        #{payCode,jdbcType=VARCHAR},
      </if>
      <if test="contractCode != null" >
        #{contractCode,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null" >
        #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractMoney != null" >
        #{contractMoney,jdbcType=VARCHAR},
      </if>
      <if test="alreadyKpMoney != null" >
        #{alreadyKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeKpMoney != null" >
        #{thisTimeKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="mainContractCode != null" >
        #{mainContractCode,jdbcType=VARCHAR},
      </if>
      <if test="mainContractName != null" >
        #{mainContractName,jdbcType=VARCHAR},
      </if>
      <if test="mainContractMoney != null" >
        #{mainContractMoney,jdbcType=VARCHAR},
      </if>
      <if test="prjListCode != null" >
        #{prjListCode,jdbcType=VARCHAR},
      </if>
      <if test="prjName != null" >
        #{prjName,jdbcType=VARCHAR},
      </if>
      <if test="fbContractSchedule != null" >
        #{fbContractSchedule,jdbcType=VARCHAR},
      </if>
      <if test="ifContractDoCost != null" >
        #{ifContractDoCost,jdbcType=VARCHAR},
      </if>
      <if test="contractDoCostMoney != null" >
        #{contractDoCostMoney,jdbcType=VARCHAR},
      </if>
      <if test="alreadyAccumulateMoney != null" >
        #{alreadyAccumulateMoney,jdbcType=VARCHAR},
      </if>
      <if test="shouldCutDfMoney != null" >
        #{shouldCutDfMoney,jdbcType=VARCHAR},
      </if>
      <if test="shouldCutMaterialMoney != null" >
        #{shouldCutMaterialMoney,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeAskMoney != null" >
        #{thisTimeAskMoney,jdbcType=VARCHAR},
      </if>
      <if test="payMethod != null" >
        #{payMethod,jdbcType=VARCHAR},
      </if>
      <if test="receieveMoneyCompany != null" >
        #{receieveMoneyCompany,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeActualPayMoney != null" >
        #{thisTimeActualPayMoney,jdbcType=VARCHAR},
      </if>
      <if test="payListExplain != null" >
        #{payListExplain,jdbcType=VARCHAR},
      </if>
      <if test="compilerPerson != null" >
        #{compilerPerson,jdbcType=VARCHAR},
      </if>
      <if test="compilerTime != null" >
        #{compilerTime,jdbcType=VARCHAR},
      </if>
      <if test="openTicketFile != null" >
        #{openTicketFile,jdbcType=VARCHAR},
      </if>
      <if test="ticketFilePath != null" >
        #{ticketFilePath,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.ldxx.bean.PayExample" resultType="java.lang.Integer" >
    select count(*) from pay
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update pay
    <set >
      <if test="record.payId != null" >
        pay_id = #{record.payId,jdbcType=VARCHAR},
      </if>
      <if test="record.payCode != null" >
        pay_code = #{record.payCode,jdbcType=VARCHAR},
      </if>
      <if test="record.contractCode != null" >
        contract_code = #{record.contractCode,jdbcType=VARCHAR},
      </if>
      <if test="record.contractName != null" >
        contract_name = #{record.contractName,jdbcType=VARCHAR},
      </if>
      <if test="record.contractMoney != null" >
        contract_money = #{record.contractMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.alreadyKpMoney != null" >
        already_kp_money = #{record.alreadyKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.thisTimeKpMoney != null" >
        this_time_kp_money = #{record.thisTimeKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.mainContractCode != null" >
        main_contract_code = #{record.mainContractCode,jdbcType=VARCHAR},
      </if>
      <if test="record.mainContractName != null" >
        main_contract_name = #{record.mainContractName,jdbcType=VARCHAR},
      </if>
      <if test="record.mainContractMoney != null" >
        main_contract_money = #{record.mainContractMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.prjListCode != null" >
        prj_list_code = #{record.prjListCode,jdbcType=VARCHAR},
      </if>
      <if test="record.prjName != null" >
        prj_name = #{record.prjName,jdbcType=VARCHAR},
      </if>
      <if test="record.fbContractSchedule != null" >
        fb_contract_schedule = #{record.fbContractSchedule,jdbcType=VARCHAR},
      </if>
      <if test="record.ifContractDoCost != null" >
        if_contract_do_cost = #{record.ifContractDoCost,jdbcType=VARCHAR},
      </if>
      <if test="record.contractDoCostMoney != null" >
        contract_do_cost_money = #{record.contractDoCostMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.alreadyAccumulateMoney != null" >
        already_accumulate_money = #{record.alreadyAccumulateMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.shouldCutDfMoney != null" >
        should_cut_df_money = #{record.shouldCutDfMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.shouldCutMaterialMoney != null" >
        should_cut_material_money = #{record.shouldCutMaterialMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.thisTimeAskMoney != null" >
        this_time_ask_money = #{record.thisTimeAskMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.payMethod != null" >
        pay_method = #{record.payMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.receieveMoneyCompany != null" >
        receieve_money_company = #{record.receieveMoneyCompany,jdbcType=VARCHAR},
      </if>
      <if test="record.thisTimeActualPayMoney != null" >
        this_time_actual_pay_money = #{record.thisTimeActualPayMoney,jdbcType=VARCHAR},
      </if>
      <if test="record.payListExplain != null" >
        pay_list_explain = #{record.payListExplain,jdbcType=VARCHAR},
      </if>
      <if test="record.compilerPerson != null" >
        compiler_person = #{record.compilerPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.compilerTime != null" >
        compiler_time = #{record.compilerTime,jdbcType=VARCHAR},
      </if>
      <if test="record.openTicketFile != null" >
        open_ticket_file = #{record.openTicketFile,jdbcType=VARCHAR},
      </if>
      <if test="record.ticketFilePath != null" >
        ticket_file_path = #{record.ticketFilePath,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pay
    set pay_id = #{record.payId,jdbcType=VARCHAR},
      pay_code = #{record.payCode,jdbcType=VARCHAR},
      contract_code = #{record.contractCode,jdbcType=VARCHAR},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      contract_money = #{record.contractMoney,jdbcType=VARCHAR},
      already_kp_money = #{record.alreadyKpMoney,jdbcType=VARCHAR},
      this_time_kp_money = #{record.thisTimeKpMoney,jdbcType=VARCHAR},
      main_contract_code = #{record.mainContractCode,jdbcType=VARCHAR},
      main_contract_name = #{record.mainContractName,jdbcType=VARCHAR},
      main_contract_money = #{record.mainContractMoney,jdbcType=VARCHAR},
      prj_list_code = #{record.prjListCode,jdbcType=VARCHAR},
      prj_name = #{record.prjName,jdbcType=VARCHAR},
      fb_contract_schedule = #{record.fbContractSchedule,jdbcType=VARCHAR},
      if_contract_do_cost = #{record.ifContractDoCost,jdbcType=VARCHAR},
      contract_do_cost_money = #{record.contractDoCostMoney,jdbcType=VARCHAR},
      already_accumulate_money = #{record.alreadyAccumulateMoney,jdbcType=VARCHAR},
      should_cut_df_money = #{record.shouldCutDfMoney,jdbcType=VARCHAR},
      should_cut_material_money = #{record.shouldCutMaterialMoney,jdbcType=VARCHAR},
      this_time_ask_money = #{record.thisTimeAskMoney,jdbcType=VARCHAR},
      pay_method = #{record.payMethod,jdbcType=VARCHAR},
      receieve_money_company = #{record.receieveMoneyCompany,jdbcType=VARCHAR},
      this_time_actual_pay_money = #{record.thisTimeActualPayMoney,jdbcType=VARCHAR},
      pay_list_explain = #{record.payListExplain,jdbcType=VARCHAR},
      compiler_person = #{record.compilerPerson,jdbcType=VARCHAR},
      compiler_time = #{record.compilerTime,jdbcType=VARCHAR},
      open_ticket_file = #{record.openTicketFile,jdbcType=VARCHAR},
      ticket_file_path = #{record.ticketFilePath,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.ldxx.bean.Pay" >
    update pay
    <set >
      <if test="payCode != null" >
        pay_code = #{payCode,jdbcType=VARCHAR},
      </if>
      <if test="contractCode != null" >
        contract_code = #{contractCode,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null" >
        contract_name = #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="contractMoney != null" >
        contract_money = #{contractMoney,jdbcType=VARCHAR},
      </if>
      <if test="alreadyKpMoney != null" >
        already_kp_money = #{alreadyKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeKpMoney != null" >
        this_time_kp_money = #{thisTimeKpMoney,jdbcType=VARCHAR},
      </if>
      <if test="mainContractCode != null" >
        main_contract_code = #{mainContractCode,jdbcType=VARCHAR},
      </if>
      <if test="mainContractName != null" >
        main_contract_name = #{mainContractName,jdbcType=VARCHAR},
      </if>
      <if test="mainContractMoney != null" >
        main_contract_money = #{mainContractMoney,jdbcType=VARCHAR},
      </if>
      <if test="prjListCode != null" >
        prj_list_code = #{prjListCode,jdbcType=VARCHAR},
      </if>
      <if test="prjName != null" >
        prj_name = #{prjName,jdbcType=VARCHAR},
      </if>
      <if test="fbContractSchedule != null" >
        fb_contract_schedule = #{fbContractSchedule,jdbcType=VARCHAR},
      </if>
      <if test="ifContractDoCost != null" >
        if_contract_do_cost = #{ifContractDoCost,jdbcType=VARCHAR},
      </if>
      <if test="contractDoCostMoney != null" >
        contract_do_cost_money = #{contractDoCostMoney,jdbcType=VARCHAR},
      </if>
      <if test="alreadyAccumulateMoney != null" >
        already_accumulate_money = #{alreadyAccumulateMoney,jdbcType=VARCHAR},
      </if>
      <if test="shouldCutDfMoney != null" >
        should_cut_df_money = #{shouldCutDfMoney,jdbcType=VARCHAR},
      </if>
      <if test="shouldCutMaterialMoney != null" >
        should_cut_material_money = #{shouldCutMaterialMoney,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeAskMoney != null" >
        this_time_ask_money = #{thisTimeAskMoney,jdbcType=VARCHAR},
      </if>
      <if test="payMethod != null" >
        pay_method = #{payMethod,jdbcType=VARCHAR},
      </if>
      <if test="receieveMoneyCompany != null" >
        receieve_money_company = #{receieveMoneyCompany,jdbcType=VARCHAR},
      </if>
      <if test="thisTimeActualPayMoney != null" >
        this_time_actual_pay_money = #{thisTimeActualPayMoney,jdbcType=VARCHAR},
      </if>
      <if test="payListExplain != null" >
        pay_list_explain = #{payListExplain,jdbcType=VARCHAR},
      </if>
      <if test="compilerPerson != null" >
        compiler_person = #{compilerPerson,jdbcType=VARCHAR},
      </if>
      <if test="compilerTime != null" >
        compiler_time = #{compilerTime,jdbcType=VARCHAR},
      </if>
      <if test="openTicketFile != null" >
        open_ticket_file = #{openTicketFile,jdbcType=VARCHAR},
      </if>
      <if test="ticketFilePath != null" >
        ticket_file_path = #{ticketFilePath,jdbcType=VARCHAR},
      </if>
    </set>
    where pay_id = #{payId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.ldxx.bean.Pay" >
    update pay
    set pay_code = #{payCode,jdbcType=VARCHAR},
      contract_code = #{contractCode,jdbcType=VARCHAR},
      contract_name = #{contractName,jdbcType=VARCHAR},
      contract_money = #{contractMoney,jdbcType=VARCHAR},
      already_kp_money = #{alreadyKpMoney,jdbcType=VARCHAR},
      this_time_kp_money = #{thisTimeKpMoney,jdbcType=VARCHAR},
      main_contract_code = #{mainContractCode,jdbcType=VARCHAR},
      main_contract_name = #{mainContractName,jdbcType=VARCHAR},
      main_contract_money = #{mainContractMoney,jdbcType=VARCHAR},
      prj_list_code = #{prjListCode,jdbcType=VARCHAR},
      prj_name = #{prjName,jdbcType=VARCHAR},
      fb_contract_schedule = #{fbContractSchedule,jdbcType=VARCHAR},
      if_contract_do_cost = #{ifContractDoCost,jdbcType=VARCHAR},
      contract_do_cost_money = #{contractDoCostMoney,jdbcType=VARCHAR},
      already_accumulate_money = #{alreadyAccumulateMoney,jdbcType=VARCHAR},
      should_cut_df_money = #{shouldCutDfMoney,jdbcType=VARCHAR},
      should_cut_material_money = #{shouldCutMaterialMoney,jdbcType=VARCHAR},
      this_time_ask_money = #{thisTimeAskMoney,jdbcType=VARCHAR},
      pay_method = #{payMethod,jdbcType=VARCHAR},
      receieve_money_company = #{receieveMoneyCompany,jdbcType=VARCHAR},
      this_time_actual_pay_money = #{thisTimeActualPayMoney,jdbcType=VARCHAR},
      pay_list_explain = #{payListExplain,jdbcType=VARCHAR},
      compiler_person = #{compilerPerson,jdbcType=VARCHAR},
      compiler_time = #{compilerTime,jdbcType=VARCHAR},
      open_ticket_file = #{openTicketFile,jdbcType=VARCHAR},
      ticket_file_path = #{ticketFilePath,jdbcType=VARCHAR}
    where pay_id = #{payId,jdbcType=VARCHAR}
  </update>
</mapper>