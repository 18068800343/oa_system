package org.ldxx.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ldxx.bean.Accessory;
import org.ldxx.bean.Announcement;
import org.ldxx.service.AnnouncementService;
import org.ldxx.util.TimeUUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.DigestUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping("announcement")
public class AnnouncementController {

	@Autowired 
	private AnnouncementService service;
	
	@RequestMapping("/addAnnouncement")
	@ResponseBody
	public Map<String,Object> addAnnouncement(Announcement announcement,@RequestParam("file")MultipartFile [] file){
		Map<String,Object> map=new HashMap<String, Object>();
		TimeUUID uuid=new TimeUUID();
		String id=uuid.getTimeUUID();
		List<Accessory> list=new ArrayList<>();
		for(int i=0;i<file.length;i++){
			Accessory accessory=new Accessory();
			String acName=file[i].getOriginalFilename();
			String url="D:/oa/announcement/"+id;
			File f=new File(url);
			if(!f.exists()){
				f.mkdirs();
			}
			String acUrl=url+File.separator+acName;
			File acFile=new File(acUrl);
			accessory.setaId(id);
			accessory.setAcName(acName);
			accessory.setAcUrl(acUrl);
			list.add(accessory);
			try {
				file[i].transferTo(acFile);
			} catch (Exception e) {
				e.printStackTrace();
				map.put("result", 0);
				return map;
			}
		}
		announcement.setaId(id);
		announcement.setAccessory(list);
		int i=service.addAnnouncement(announcement);
		map.put("result", i);
		map.put("announcement", announcement);
		return map;
	}
	
	
	@RequestMapping("/deleteAccessory")
	@ResponseBody
	public int deleteAccessory(Accessory accessory){
		int i=service.deleteAccessoryByIdAndName(accessory);
		if(i>0){
			File f=new File(accessory.getAcUrl());
			f.delete();
		}
		return i;
	}
	
	@RequestMapping("/updateAnnouncement")
	@ResponseBody
	public Map<String,Object> updateAnnouncement(Announcement announcement,@RequestParam("file")MultipartFile [] file){
		Map<String,Object> map=new HashMap<String, Object>();
		int a=0;
		
		String id=announcement.getaId();
		List<Accessory> list2=new ArrayList<>();
		for(int iii=0;iii<file.length;iii++){
			Accessory accessory=new Accessory();
			String acName=file[iii].getOriginalFilename();
			String url="D:/oa/announcement/"+id;
			File f=new File(url);
			if(!f.exists()){
				f.mkdirs();
			}
			String acUrl=url+File.separator+acName;
			File acFile=new File(acUrl);
			accessory.setaId(id);
			accessory.setAcName(acName);
			accessory.setAcUrl(acUrl);
			list2.add(accessory);
			try {
				file[iii].transferTo(acFile);
			} catch (Exception e) {
				e.printStackTrace();
				map.put("result", 0);
				return map;
			}
		}
		announcement.setAccessory(list2);
		a=service.updateAnnouncement(announcement);
		map.put("result", a);
		map.put("announcement", announcement);
		
		return map;
	}
	
	
	@RequestMapping("/deleteAnnouncement")
	@ResponseBody
	public int deleteAnnouncement(String id){
		return service.deleteAnnouncement(id);
	}
	
	
	@RequestMapping("/selectAnnouncement")
	@ResponseBody
	public List<Announcement> selectAnnouncement(String status){
		List<Announcement> list=service.selectAnnouncement(status);
		return list;
	}
	
}
