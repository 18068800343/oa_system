<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ldxx.mapper.financial_paymentMapper">
  <resultMap id="BaseResultMap" type="org.ldxx.bean.financial_payment">
    <id column="fp_id" jdbcType="VARCHAR" property="fpId" />
    <result column="serial_number" jdbcType="VARCHAR" property="serialNumber" />
    <result column="work_no" jdbcType="VARCHAR" property="workNo" />
    <result column="contract_number" jdbcType="VARCHAR" property="contractNumber" />
    <result column="payment_number" jdbcType="VARCHAR" property="paymentNumber" />
    <result column="contract_name" jdbcType="VARCHAR" property="contractName" />
    <result column="administration" jdbcType="VARCHAR" property="administration" />
    <result column="contract_amount" jdbcType="REAL" property="contractAmount" />
    <result column="contract_amount2" jdbcType="REAL" property="contractAmount2" />
    <result column="contract_payment" jdbcType="REAL" property="contractPayment" />
    <result column="collection_ratio" jdbcType="REAL" property="collectionRatio" />
    <result column="contract_no_split" jdbcType="VARCHAR" property="contractNoSplit" />
    <result column="contract_name_split" jdbcType="VARCHAR" property="contractNameSplit" />
    <result column="second_party" jdbcType="VARCHAR" property="secondParty" />
    <result column="contract_amount_split" jdbcType="REAL" property="contractAmountSplit" />
    <result column="contract_amount_split2" jdbcType="REAL" property="contractAmountSplit2" />
    <result column="accumulated_payment" jdbcType="REAL" property="accumulatedPayment" />
    <result column="Invoiced_amount" jdbcType="REAL" property="invoicedAmount" />
    <result column="invoice_number_other" jdbcType="VARCHAR" property="invoiceNumberOther" />
    <result column="amount_received" jdbcType="REAL" property="amountReceived" />
    <result column="actual_payment" jdbcType="REAL" property="actualPayment" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fp_id, serial_number, work_no, contract_number, payment_number, contract_name, administration, 
    contract_amount, contract_amount2, contract_payment, collection_ratio, contract_no_split, 
    contract_name_split, second_party, contract_amount_split, contract_amount_split2, 
    accumulated_payment, Invoiced_amount, invoice_number_other, amount_received, actual_payment
  </sql>
  <select id="selectByExample" parameterType="org.ldxx.bean.financial_paymentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from financial_payment
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from financial_payment
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="org.ldxx.bean.financial_paymentExample">
    delete from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.ldxx.bean.financial_payment">
    <selectKey keyProperty="fpId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into financial_payment (serial_number, work_no, contract_number, 
      payment_number, contract_name, administration, 
      contract_amount, contract_amount2, contract_payment, 
      collection_ratio, contract_no_split, contract_name_split, 
      second_party, contract_amount_split, contract_amount_split2, 
      accumulated_payment, Invoiced_amount, invoice_number_other, 
      amount_received, actual_payment)
    values (#{serialNumber,jdbcType=VARCHAR}, #{workNo,jdbcType=VARCHAR}, #{contractNumber,jdbcType=VARCHAR}, 
      #{paymentNumber,jdbcType=VARCHAR}, #{contractName,jdbcType=VARCHAR}, #{administration,jdbcType=VARCHAR}, 
      #{contractAmount,jdbcType=REAL}, #{contractAmount2,jdbcType=REAL}, #{contractPayment,jdbcType=REAL}, 
      #{collectionRatio,jdbcType=REAL}, #{contractNoSplit,jdbcType=VARCHAR}, #{contractNameSplit,jdbcType=VARCHAR}, 
      #{secondParty,jdbcType=VARCHAR}, #{contractAmountSplit,jdbcType=REAL}, #{contractAmountSplit2,jdbcType=REAL}, 
      #{accumulatedPayment,jdbcType=REAL}, #{invoicedAmount,jdbcType=REAL}, #{invoiceNumberOther,jdbcType=VARCHAR}, 
      #{amountReceived,jdbcType=REAL}, #{actualPayment,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="org.ldxx.bean.financial_payment">
    <selectKey keyProperty="fpId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into financial_payment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        serial_number,
      </if>
      <if test="workNo != null">
        work_no,
      </if>
      <if test="contractNumber != null">
        contract_number,
      </if>
      <if test="paymentNumber != null">
        payment_number,
      </if>
      <if test="contractName != null">
        contract_name,
      </if>
      <if test="administration != null">
        administration,
      </if>
      <if test="contractAmount != null">
        contract_amount,
      </if>
      <if test="contractAmount2 != null">
        contract_amount2,
      </if>
      <if test="contractPayment != null">
        contract_payment,
      </if>
      <if test="collectionRatio != null">
        collection_ratio,
      </if>
      <if test="contractNoSplit != null">
        contract_no_split,
      </if>
      <if test="contractNameSplit != null">
        contract_name_split,
      </if>
      <if test="secondParty != null">
        second_party,
      </if>
      <if test="contractAmountSplit != null">
        contract_amount_split,
      </if>
      <if test="contractAmountSplit2 != null">
        contract_amount_split2,
      </if>
      <if test="accumulatedPayment != null">
        accumulated_payment,
      </if>
      <if test="invoicedAmount != null">
        Invoiced_amount,
      </if>
      <if test="invoiceNumberOther != null">
        invoice_number_other,
      </if>
      <if test="amountReceived != null">
        amount_received,
      </if>
      <if test="actualPayment != null">
        actual_payment,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="workNo != null">
        #{workNo,jdbcType=VARCHAR},
      </if>
      <if test="contractNumber != null">
        #{contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="paymentNumber != null">
        #{paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        #{administration,jdbcType=VARCHAR},
      </if>
      <if test="contractAmount != null">
        #{contractAmount,jdbcType=REAL},
      </if>
      <if test="contractAmount2 != null">
        #{contractAmount2,jdbcType=REAL},
      </if>
      <if test="contractPayment != null">
        #{contractPayment,jdbcType=REAL},
      </if>
      <if test="collectionRatio != null">
        #{collectionRatio,jdbcType=REAL},
      </if>
      <if test="contractNoSplit != null">
        #{contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="contractNameSplit != null">
        #{contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="secondParty != null">
        #{secondParty,jdbcType=VARCHAR},
      </if>
      <if test="contractAmountSplit != null">
        #{contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="contractAmountSplit2 != null">
        #{contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="accumulatedPayment != null">
        #{accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="invoicedAmount != null">
        #{invoicedAmount,jdbcType=REAL},
      </if>
      <if test="invoiceNumberOther != null">
        #{invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="amountReceived != null">
        #{amountReceived,jdbcType=REAL},
      </if>
      <if test="actualPayment != null">
        #{actualPayment,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.ldxx.bean.financial_paymentExample" resultType="java.lang.Integer">
    select count(*) from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update financial_payment
    <set>
      <if test="record.fpId != null">
        fp_id = #{record.fpId,jdbcType=VARCHAR},
      </if>
      <if test="record.serialNumber != null">
        serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.workNo != null">
        work_no = #{record.workNo,jdbcType=VARCHAR},
      </if>
      <if test="record.contractNumber != null">
        contract_number = #{record.contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.paymentNumber != null">
        payment_number = #{record.paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.contractName != null">
        contract_name = #{record.contractName,jdbcType=VARCHAR},
      </if>
      <if test="record.administration != null">
        administration = #{record.administration,jdbcType=VARCHAR},
      </if>
      <if test="record.contractAmount != null">
        contract_amount = #{record.contractAmount,jdbcType=REAL},
      </if>
      <if test="record.contractAmount2 != null">
        contract_amount2 = #{record.contractAmount2,jdbcType=REAL},
      </if>
      <if test="record.contractPayment != null">
        contract_payment = #{record.contractPayment,jdbcType=REAL},
      </if>
      <if test="record.collectionRatio != null">
        collection_ratio = #{record.collectionRatio,jdbcType=REAL},
      </if>
      <if test="record.contractNoSplit != null">
        contract_no_split = #{record.contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="record.contractNameSplit != null">
        contract_name_split = #{record.contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="record.secondParty != null">
        second_party = #{record.secondParty,jdbcType=VARCHAR},
      </if>
      <if test="record.contractAmountSplit != null">
        contract_amount_split = #{record.contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="record.contractAmountSplit2 != null">
        contract_amount_split2 = #{record.contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="record.accumulatedPayment != null">
        accumulated_payment = #{record.accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="record.invoicedAmount != null">
        Invoiced_amount = #{record.invoicedAmount,jdbcType=REAL},
      </if>
      <if test="record.invoiceNumberOther != null">
        invoice_number_other = #{record.invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="record.amountReceived != null">
        amount_received = #{record.amountReceived,jdbcType=REAL},
      </if>
      <if test="record.actualPayment != null">
        actual_payment = #{record.actualPayment,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update financial_payment
    set fp_id = #{record.fpId,jdbcType=VARCHAR},
      serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      work_no = #{record.workNo,jdbcType=VARCHAR},
      contract_number = #{record.contractNumber,jdbcType=VARCHAR},
      payment_number = #{record.paymentNumber,jdbcType=VARCHAR},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      administration = #{record.administration,jdbcType=VARCHAR},
      contract_amount = #{record.contractAmount,jdbcType=REAL},
      contract_amount2 = #{record.contractAmount2,jdbcType=REAL},
      contract_payment = #{record.contractPayment,jdbcType=REAL},
      collection_ratio = #{record.collectionRatio,jdbcType=REAL},
      contract_no_split = #{record.contractNoSplit,jdbcType=VARCHAR},
      contract_name_split = #{record.contractNameSplit,jdbcType=VARCHAR},
      second_party = #{record.secondParty,jdbcType=VARCHAR},
      contract_amount_split = #{record.contractAmountSplit,jdbcType=REAL},
      contract_amount_split2 = #{record.contractAmountSplit2,jdbcType=REAL},
      accumulated_payment = #{record.accumulatedPayment,jdbcType=REAL},
      Invoiced_amount = #{record.invoicedAmount,jdbcType=REAL},
      invoice_number_other = #{record.invoiceNumberOther,jdbcType=VARCHAR},
      amount_received = #{record.amountReceived,jdbcType=REAL},
      actual_payment = #{record.actualPayment,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.ldxx.bean.financial_payment">
    update financial_payment
    <set>
      <if test="serialNumber != null">
        serial_number = #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="workNo != null">
        work_no = #{workNo,jdbcType=VARCHAR},
      </if>
      <if test="contractNumber != null">
        contract_number = #{contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="paymentNumber != null">
        payment_number = #{paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        contract_name = #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        administration = #{administration,jdbcType=VARCHAR},
      </if>
      <if test="contractAmount != null">
        contract_amount = #{contractAmount,jdbcType=REAL},
      </if>
      <if test="contractAmount2 != null">
        contract_amount2 = #{contractAmount2,jdbcType=REAL},
      </if>
      <if test="contractPayment != null">
        contract_payment = #{contractPayment,jdbcType=REAL},
      </if>
      <if test="collectionRatio != null">
        collection_ratio = #{collectionRatio,jdbcType=REAL},
      </if>
      <if test="contractNoSplit != null">
        contract_no_split = #{contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="contractNameSplit != null">
        contract_name_split = #{contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="secondParty != null">
        second_party = #{secondParty,jdbcType=VARCHAR},
      </if>
      <if test="contractAmountSplit != null">
        contract_amount_split = #{contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="contractAmountSplit2 != null">
        contract_amount_split2 = #{contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="accumulatedPayment != null">
        accumulated_payment = #{accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="invoicedAmount != null">
        Invoiced_amount = #{invoicedAmount,jdbcType=REAL},
      </if>
      <if test="invoiceNumberOther != null">
        invoice_number_other = #{invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="amountReceived != null">
        amount_received = #{amountReceived,jdbcType=REAL},
      </if>
      <if test="actualPayment != null">
        actual_payment = #{actualPayment,jdbcType=REAL},
      </if>
    </set>
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.ldxx.bean.financial_payment">
    update financial_payment
    set serial_number = #{serialNumber,jdbcType=VARCHAR},
      work_no = #{workNo,jdbcType=VARCHAR},
      contract_number = #{contractNumber,jdbcType=VARCHAR},
      payment_number = #{paymentNumber,jdbcType=VARCHAR},
      contract_name = #{contractName,jdbcType=VARCHAR},
      administration = #{administration,jdbcType=VARCHAR},
      contract_amount = #{contractAmount,jdbcType=REAL},
      contract_amount2 = #{contractAmount2,jdbcType=REAL},
      contract_payment = #{contractPayment,jdbcType=REAL},
      collection_ratio = #{collectionRatio,jdbcType=REAL},
      contract_no_split = #{contractNoSplit,jdbcType=VARCHAR},
      contract_name_split = #{contractNameSplit,jdbcType=VARCHAR},
      second_party = #{secondParty,jdbcType=VARCHAR},
      contract_amount_split = #{contractAmountSplit,jdbcType=REAL},
      contract_amount_split2 = #{contractAmountSplit2,jdbcType=REAL},
      accumulated_payment = #{accumulatedPayment,jdbcType=REAL},
      Invoiced_amount = #{invoicedAmount,jdbcType=REAL},
      invoice_number_other = #{invoiceNumberOther,jdbcType=VARCHAR},
      amount_received = #{amountReceived,jdbcType=REAL},
      actual_payment = #{actualPayment,jdbcType=REAL}
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </update>
  <resultMap id="BaseResultMap" type="org.ldxx.bean.financial_payment">
    <id column="fp_id" jdbcType="VARCHAR" property="fpId" />
    <result column="serial_number" jdbcType="VARCHAR" property="serialNumber" />
    <result column="work_no" jdbcType="VARCHAR" property="workNo" />
    <result column="contract_number" jdbcType="VARCHAR" property="contractNumber" />
    <result column="payment_number" jdbcType="VARCHAR" property="paymentNumber" />
    <result column="contract_name" jdbcType="VARCHAR" property="contractName" />
    <result column="administration" jdbcType="VARCHAR" property="administration" />
    <result column="contract_amount" jdbcType="REAL" property="contractAmount" />
    <result column="contract_amount2" jdbcType="REAL" property="contractAmount2" />
    <result column="contract_payment" jdbcType="REAL" property="contractPayment" />
    <result column="collection_ratio" jdbcType="REAL" property="collectionRatio" />
    <result column="contract_no_split" jdbcType="VARCHAR" property="contractNoSplit" />
    <result column="contract_name_split" jdbcType="VARCHAR" property="contractNameSplit" />
    <result column="second_party" jdbcType="VARCHAR" property="secondParty" />
    <result column="contract_amount_split" jdbcType="REAL" property="contractAmountSplit" />
    <result column="contract_amount_split2" jdbcType="REAL" property="contractAmountSplit2" />
    <result column="accumulated_payment" jdbcType="REAL" property="accumulatedPayment" />
    <result column="Invoiced_amount" jdbcType="REAL" property="invoicedAmount" />
    <result column="invoice_number_other" jdbcType="VARCHAR" property="invoiceNumberOther" />
    <result column="amount_received" jdbcType="REAL" property="amountReceived" />
    <result column="actual_payment" jdbcType="REAL" property="actualPayment" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fp_id, serial_number, work_no, contract_number, payment_number, contract_name, administration, 
    contract_amount, contract_amount2, contract_payment, collection_ratio, contract_no_split, 
    contract_name_split, second_party, contract_amount_split, contract_amount_split2, 
    accumulated_payment, Invoiced_amount, invoice_number_other, amount_received, actual_payment
  </sql>
  <select id="selectByExample" parameterType="org.ldxx.bean.financial_paymentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from financial_payment
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from financial_payment
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="org.ldxx.bean.financial_paymentExample">
    delete from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.ldxx.bean.financial_payment">
    <selectKey keyProperty="fpId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into financial_payment (serial_number, work_no, contract_number, 
      payment_number, contract_name, administration, 
      contract_amount, contract_amount2, contract_payment, 
      collection_ratio, contract_no_split, contract_name_split, 
      second_party, contract_amount_split, contract_amount_split2, 
      accumulated_payment, Invoiced_amount, invoice_number_other, 
      amount_received, actual_payment)
    values (#{serialNumber,jdbcType=VARCHAR}, #{workNo,jdbcType=VARCHAR}, #{contractNumber,jdbcType=VARCHAR}, 
      #{paymentNumber,jdbcType=VARCHAR}, #{contractName,jdbcType=VARCHAR}, #{administration,jdbcType=VARCHAR}, 
      #{contractAmount,jdbcType=REAL}, #{contractAmount2,jdbcType=REAL}, #{contractPayment,jdbcType=REAL}, 
      #{collectionRatio,jdbcType=REAL}, #{contractNoSplit,jdbcType=VARCHAR}, #{contractNameSplit,jdbcType=VARCHAR}, 
      #{secondParty,jdbcType=VARCHAR}, #{contractAmountSplit,jdbcType=REAL}, #{contractAmountSplit2,jdbcType=REAL}, 
      #{accumulatedPayment,jdbcType=REAL}, #{invoicedAmount,jdbcType=REAL}, #{invoiceNumberOther,jdbcType=VARCHAR}, 
      #{amountReceived,jdbcType=REAL}, #{actualPayment,jdbcType=REAL})
  </insert>
  <insert id="insertSelective" parameterType="org.ldxx.bean.financial_payment">
    <selectKey keyProperty="fpId" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into financial_payment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        serial_number,
      </if>
      <if test="workNo != null">
        work_no,
      </if>
      <if test="contractNumber != null">
        contract_number,
      </if>
      <if test="paymentNumber != null">
        payment_number,
      </if>
      <if test="contractName != null">
        contract_name,
      </if>
      <if test="administration != null">
        administration,
      </if>
      <if test="contractAmount != null">
        contract_amount,
      </if>
      <if test="contractAmount2 != null">
        contract_amount2,
      </if>
      <if test="contractPayment != null">
        contract_payment,
      </if>
      <if test="collectionRatio != null">
        collection_ratio,
      </if>
      <if test="contractNoSplit != null">
        contract_no_split,
      </if>
      <if test="contractNameSplit != null">
        contract_name_split,
      </if>
      <if test="secondParty != null">
        second_party,
      </if>
      <if test="contractAmountSplit != null">
        contract_amount_split,
      </if>
      <if test="contractAmountSplit2 != null">
        contract_amount_split2,
      </if>
      <if test="accumulatedPayment != null">
        accumulated_payment,
      </if>
      <if test="invoicedAmount != null">
        Invoiced_amount,
      </if>
      <if test="invoiceNumberOther != null">
        invoice_number_other,
      </if>
      <if test="amountReceived != null">
        amount_received,
      </if>
      <if test="actualPayment != null">
        actual_payment,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="serialNumber != null">
        #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="workNo != null">
        #{workNo,jdbcType=VARCHAR},
      </if>
      <if test="contractNumber != null">
        #{contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="paymentNumber != null">
        #{paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        #{administration,jdbcType=VARCHAR},
      </if>
      <if test="contractAmount != null">
        #{contractAmount,jdbcType=REAL},
      </if>
      <if test="contractAmount2 != null">
        #{contractAmount2,jdbcType=REAL},
      </if>
      <if test="contractPayment != null">
        #{contractPayment,jdbcType=REAL},
      </if>
      <if test="collectionRatio != null">
        #{collectionRatio,jdbcType=REAL},
      </if>
      <if test="contractNoSplit != null">
        #{contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="contractNameSplit != null">
        #{contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="secondParty != null">
        #{secondParty,jdbcType=VARCHAR},
      </if>
      <if test="contractAmountSplit != null">
        #{contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="contractAmountSplit2 != null">
        #{contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="accumulatedPayment != null">
        #{accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="invoicedAmount != null">
        #{invoicedAmount,jdbcType=REAL},
      </if>
      <if test="invoiceNumberOther != null">
        #{invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="amountReceived != null">
        #{amountReceived,jdbcType=REAL},
      </if>
      <if test="actualPayment != null">
        #{actualPayment,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.ldxx.bean.financial_paymentExample" resultType="java.lang.Integer">
    select count(*) from financial_payment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update financial_payment
    <set>
      <if test="record.fpId != null">
        fp_id = #{record.fpId,jdbcType=VARCHAR},
      </if>
      <if test="record.serialNumber != null">
        serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.workNo != null">
        work_no = #{record.workNo,jdbcType=VARCHAR},
      </if>
      <if test="record.contractNumber != null">
        contract_number = #{record.contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.paymentNumber != null">
        payment_number = #{record.paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.contractName != null">
        contract_name = #{record.contractName,jdbcType=VARCHAR},
      </if>
      <if test="record.administration != null">
        administration = #{record.administration,jdbcType=VARCHAR},
      </if>
      <if test="record.contractAmount != null">
        contract_amount = #{record.contractAmount,jdbcType=REAL},
      </if>
      <if test="record.contractAmount2 != null">
        contract_amount2 = #{record.contractAmount2,jdbcType=REAL},
      </if>
      <if test="record.contractPayment != null">
        contract_payment = #{record.contractPayment,jdbcType=REAL},
      </if>
      <if test="record.collectionRatio != null">
        collection_ratio = #{record.collectionRatio,jdbcType=REAL},
      </if>
      <if test="record.contractNoSplit != null">
        contract_no_split = #{record.contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="record.contractNameSplit != null">
        contract_name_split = #{record.contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="record.secondParty != null">
        second_party = #{record.secondParty,jdbcType=VARCHAR},
      </if>
      <if test="record.contractAmountSplit != null">
        contract_amount_split = #{record.contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="record.contractAmountSplit2 != null">
        contract_amount_split2 = #{record.contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="record.accumulatedPayment != null">
        accumulated_payment = #{record.accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="record.invoicedAmount != null">
        Invoiced_amount = #{record.invoicedAmount,jdbcType=REAL},
      </if>
      <if test="record.invoiceNumberOther != null">
        invoice_number_other = #{record.invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="record.amountReceived != null">
        amount_received = #{record.amountReceived,jdbcType=REAL},
      </if>
      <if test="record.actualPayment != null">
        actual_payment = #{record.actualPayment,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update financial_payment
    set fp_id = #{record.fpId,jdbcType=VARCHAR},
      serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      work_no = #{record.workNo,jdbcType=VARCHAR},
      contract_number = #{record.contractNumber,jdbcType=VARCHAR},
      payment_number = #{record.paymentNumber,jdbcType=VARCHAR},
      contract_name = #{record.contractName,jdbcType=VARCHAR},
      administration = #{record.administration,jdbcType=VARCHAR},
      contract_amount = #{record.contractAmount,jdbcType=REAL},
      contract_amount2 = #{record.contractAmount2,jdbcType=REAL},
      contract_payment = #{record.contractPayment,jdbcType=REAL},
      collection_ratio = #{record.collectionRatio,jdbcType=REAL},
      contract_no_split = #{record.contractNoSplit,jdbcType=VARCHAR},
      contract_name_split = #{record.contractNameSplit,jdbcType=VARCHAR},
      second_party = #{record.secondParty,jdbcType=VARCHAR},
      contract_amount_split = #{record.contractAmountSplit,jdbcType=REAL},
      contract_amount_split2 = #{record.contractAmountSplit2,jdbcType=REAL},
      accumulated_payment = #{record.accumulatedPayment,jdbcType=REAL},
      Invoiced_amount = #{record.invoicedAmount,jdbcType=REAL},
      invoice_number_other = #{record.invoiceNumberOther,jdbcType=VARCHAR},
      amount_received = #{record.amountReceived,jdbcType=REAL},
      actual_payment = #{record.actualPayment,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.ldxx.bean.financial_payment">
    update financial_payment
    <set>
      <if test="serialNumber != null">
        serial_number = #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="workNo != null">
        work_no = #{workNo,jdbcType=VARCHAR},
      </if>
      <if test="contractNumber != null">
        contract_number = #{contractNumber,jdbcType=VARCHAR},
      </if>
      <if test="paymentNumber != null">
        payment_number = #{paymentNumber,jdbcType=VARCHAR},
      </if>
      <if test="contractName != null">
        contract_name = #{contractName,jdbcType=VARCHAR},
      </if>
      <if test="administration != null">
        administration = #{administration,jdbcType=VARCHAR},
      </if>
      <if test="contractAmount != null">
        contract_amount = #{contractAmount,jdbcType=REAL},
      </if>
      <if test="contractAmount2 != null">
        contract_amount2 = #{contractAmount2,jdbcType=REAL},
      </if>
      <if test="contractPayment != null">
        contract_payment = #{contractPayment,jdbcType=REAL},
      </if>
      <if test="collectionRatio != null">
        collection_ratio = #{collectionRatio,jdbcType=REAL},
      </if>
      <if test="contractNoSplit != null">
        contract_no_split = #{contractNoSplit,jdbcType=VARCHAR},
      </if>
      <if test="contractNameSplit != null">
        contract_name_split = #{contractNameSplit,jdbcType=VARCHAR},
      </if>
      <if test="secondParty != null">
        second_party = #{secondParty,jdbcType=VARCHAR},
      </if>
      <if test="contractAmountSplit != null">
        contract_amount_split = #{contractAmountSplit,jdbcType=REAL},
      </if>
      <if test="contractAmountSplit2 != null">
        contract_amount_split2 = #{contractAmountSplit2,jdbcType=REAL},
      </if>
      <if test="accumulatedPayment != null">
        accumulated_payment = #{accumulatedPayment,jdbcType=REAL},
      </if>
      <if test="invoicedAmount != null">
        Invoiced_amount = #{invoicedAmount,jdbcType=REAL},
      </if>
      <if test="invoiceNumberOther != null">
        invoice_number_other = #{invoiceNumberOther,jdbcType=VARCHAR},
      </if>
      <if test="amountReceived != null">
        amount_received = #{amountReceived,jdbcType=REAL},
      </if>
      <if test="actualPayment != null">
        actual_payment = #{actualPayment,jdbcType=REAL},
      </if>
    </set>
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.ldxx.bean.financial_payment">
    update financial_payment
    set serial_number = #{serialNumber,jdbcType=VARCHAR},
      work_no = #{workNo,jdbcType=VARCHAR},
      contract_number = #{contractNumber,jdbcType=VARCHAR},
      payment_number = #{paymentNumber,jdbcType=VARCHAR},
      contract_name = #{contractName,jdbcType=VARCHAR},
      administration = #{administration,jdbcType=VARCHAR},
      contract_amount = #{contractAmount,jdbcType=REAL},
      contract_amount2 = #{contractAmount2,jdbcType=REAL},
      contract_payment = #{contractPayment,jdbcType=REAL},
      collection_ratio = #{collectionRatio,jdbcType=REAL},
      contract_no_split = #{contractNoSplit,jdbcType=VARCHAR},
      contract_name_split = #{contractNameSplit,jdbcType=VARCHAR},
      second_party = #{secondParty,jdbcType=VARCHAR},
      contract_amount_split = #{contractAmountSplit,jdbcType=REAL},
      contract_amount_split2 = #{contractAmountSplit2,jdbcType=REAL},
      accumulated_payment = #{accumulatedPayment,jdbcType=REAL},
      Invoiced_amount = #{invoicedAmount,jdbcType=REAL},
      invoice_number_other = #{invoiceNumberOther,jdbcType=VARCHAR},
      amount_received = #{amountReceived,jdbcType=REAL},
      actual_payment = #{actualPayment,jdbcType=REAL}
    where fp_id = #{fpId,jdbcType=VARCHAR}
  </update>
</mapper>